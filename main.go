package main

import (
	"os"
	"product-info/controller"
	"product-info/database"

	"github.com/gin-gonic/gin"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"

	log "github.com/sirupsen/logrus"

	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware

	"product-info/docs" // docs is generated by Swag CLI, you have to import it.
	"product-info/lib/testutils"
)


func init() {
	
	testutils.LoadEnv()
	dbname := os.Getenv("DBNAME")
	prometheus.MustRegister(controller.IdAccessCounter)

	if err := database.InitDB(dbname).Error; err != nil {
		log.Println("failed to connect db")
	}
	database.StartMigration(dbname)
}

// @title           Product Info System API
// @version         1.0
// @description     This is Product Info System Server for Central Warehouse.

func main() {

	router := gin.Default()

	// programmatically set swagger info
	docs.SwaggerInfo.Title = "Product Information System API"
	docs.SwaggerInfo.Description = "This is a Product Information System server."
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = "localhost:8080"
	//docs.SwaggerInfo.BasePath = "/v2"
	docs.SwaggerInfo.Schemes = []string{"http"}
	//docs.SwaggerInfo.Schemes = []string{"http", "https"}

	mainGroup := router.Group("/")
	{

		productsGroup := mainGroup.Group("/products")
		{
			productsGroup.GET("", controller.ListProducts)
		}

		productGroup := mainGroup.Group("/product")
		{
			productGroup.POST("", controller.PostProduct)
			productGroup.GET("/:id", controller.GetProduct)
			productGroup.PATCH("/:id", controller.UpdateProduct)
			productGroup.DELETE("/:id", controller.DeleteProduct)
		}

		prometheusGroup := mainGroup.Group("/metrics")
		{
			prometheusGroup.GET("", gin.WrapH(promhttp.Handler()))
		}

	}

	// use ginSwagger middleware to serve the API docs
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	router.Run()

}
