services:
  productinfosys:
    image: productinfosys
    container_name: productinfosys-container
    build:
      dockerfile: Dockerfile
      context: .
    volumes:
      #- .:/app
    - type: volume
      source: product-productinfo-vol
      target: /app  
    ports:
    - "8080:8080"
      #- "5672:5672"
    networks:
      product-net:
    #rabbitmq:
    depends_on:
      rabbitmq:
        condition: service_healthy
      #grafana:
    #restart: on-failure:5   # no|always|on-failure[:max-retries]|unless-stopped
  
  productpromous:
    image: productpromous
    container_name: productpromous-container
    build:
      dockerfile: Dockerfile
      context: ../ProductPromoUS/
    volumes:
    - type: volume
      source: product-promous-vol
      target: /app  
    ports:
    - "8081:8081"
    networks:
      product-net:
    depends_on:
      rabbitmq:
        condition: service_healthy
      #grafana:    
    #restart: on-failure:5   # no|always|on-failure[:max-retries]|unless-stopped
  
  
  custmobileeu:
    image: custmobileeu
    container_name: custmobileeu-container
    build:
      dockerfile: Dockerfile
      context: ../CustMobilePortalEU/
    volumes:
    - type: volume
      source: product-mobileeu-vol
      target: /app  
    ports:
    - "8082:8082"
    networks:
      product-net:
    depends_on:
      rabbitmq:
        condition: service_healthy
      #grafana:
    #restart: on-failure:5   # no|always|on-failure[:max-retries]|unless-stopped
 
          #grafana:
    #image: grafana/grafana:11.1.1-ubuntu
      #container_name: grafana
      #ports:
      #- '3000:3000'  
        #networks:
      #  product-net:

  prometheus: 
    image: prometheus
    container_name: prometheus-container
    build:
      dockerfile: Dockerfile 
      context: ../Prometheus/config/prometheus/  
    #volumes:
    #- type: volume
    #  source: product-prometheus
    #  target: /etc/prometheus/
    ports: 
    - '9090:9090' 
    networks:
      product-net:
    command:
    - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
    - "./:/etc/prometheus/prometheus.yml"
    depends_on:
    - productinfosys
    - productpromous
    - custmobileeu
    #- nodeexporter


    #nodeexporter:
    #image:
    #container_name:
    #ports:
    #- '9100:9100'
    #networks:
    #product-net:

  
    #cadvisor:
    #image: gcr.io/cadvisor/cadvisor:latest
    #container_name: cadvisor
    #ports:
    #- 8090:8090
    #volumes:
    #- /:/rootfs:ro
    #- /var/run:/var/run:rw
    #- /sys:/sys:ro
    #- /var/lib/docker/:/var/lib/docker:ro
    #depends_on:
    #- productinfosys
    #- productpromous
    #- custmobileeu
    #- rabbitmq 	     
  
  rabbitmq:
    image: 'rabbitmq:3.13.6-management-alpine'
    container_name: 'rabbitmq'  
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      # AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      # AMQP_URL: 'amqp://guest:guest@rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_NODE_PORT_NUMBER: "5672"
      RABBITMQ_MANAGEMENT_PORT_NUMBER: "15672"
      #RABBITMQ_MANAGEMENT_BIND_IP: "0.0.0.0"
      #RABBITMQ_CLUSTER_NODE_NAME: "localhost"
      #RABBITMQ_NODE_NAME: "rabbit@localhost"
      #RABBITMQ_DEFAULT_VHOST: "127.0.0.1"
      #PORT: 5672
    networks:
      product-net:
    healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:15672"]
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 10
      #
      #
networks:
  product-net:
volumes:
  product-promous-vol:
  product-mobileeu-vol:
  product-productinfo-vol:
  product-prometheus:

# Top level section like Service. networks & volumes are most widely used along with services. network & volume starts before service
##networks:
##volumes:        
##secrets:
##configs:
#
#
# networks - creates new overlay network that span multiple hosts. driver to specify different network types.
# // networks:
# //   over-net:
# //   driver: overlay
# //   attachable: true 
#
# volumes: creates new volume 
#
#
#
# https://hub.docker.com/r/bitnami/rabbitmq
#
# https://devops.stackexchange.com/questions/12092/docker-compose-healthcheck-for-rabbitmq
